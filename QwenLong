import os
from pathlib import Path
import openai

# Set Key
DASHSCOPE_API_KEY = ""

# Aliyun API base URL
DASHSCOPE_BASE_URL = "https://dashscope.aliyuncs.com/compatible-mode/v1"

# Init OpenAI client
openai.api_key = os.getenv("DASHSCOPE_API_KEY", DASHSCOPE_API_KEY)
openai.api_base = DASHSCOPE_BASE_URL

# Upload file to get file-id
file_path = Path(r"00c1abb944088c8c1fd2c03c6f6b6af7.pdf")
file_object = openai.File.create(file=open(file_path, "rb"), purpose="file-extract")
file_id = file_object.id

print(f"Uploaded file ID: {file_id}")

# Construct messages for interaction
messages = [
    {'role': 'system', 'content': 'You are a helpful assistant.'},
    {'role': 'system', 'content': f'fileid://{file_id}'},
    {'role': 'user', 'content': 'Task instruction: ]

# Call the model to get response
completion = openai.ChatCompletion.create(
    model="qwen-long",
    messages=messages,
    stream=True,  # Streaming output
    temperature=0.7,  # Output randomness
    top_p=0.8  # Nucleus sampling for output control
)

# Output and concatenate response
response_content = ""
for chunk in completion:
    if hasattr(chunk, 'choices') and len(chunk.choices) > 0:
        delta_content = chunk.choices[0].delta.get("content", "")
        if delta_content:
            response_content += delta_content
            print(delta_content, end="")  # Real-time output

# Check and save the output
if response_content.strip():
    print("\n\nGenerated Response:\n")
    print(response_content)

    with open("summary_output.txt", "w", encoding="utf-8") as output_file:
        output_file.write(response_content)

    print("\nSummary saved to summary_output.txt")
else:
    print("\nNo content was generated by the model.")
